@page "/login"
@using System.ComponentModel.DataAnnotations
@using MiniprojectTesting.Models
@using MiniprojectTesting.Services
@inject TodoService TodoService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService

<PageTitle>LoginPage</PageTitle>

<div class="login-wrap">
    <div class="login-html">
        <h2 class="tab">Login</h2>
        <div class="login-form">
            <div class="sign-in-htm">
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="group">
                        <label for="email" class="label">Email</label>
                        <InputText id="user" class="input" @bind-Value="loginModel.Email" placeholder="Enter your username" />
                    </div>
                    <div class="group">
                        <label for="password" class="label">Password</label>
                        <InputText id="pass" type="password" class="input" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                    </div>
                    <div class="group">
                        <InputCheckbox id="check" class="check" @bind-Value="keepSignedIn" />
                        <label for="check"><span class="icon"></span> Keep me signed in</label>
                    </div>
                    <div class="group">
                        <button id="loginButton" class="button" style="text-align: center; font-style: normal;" type="submit">
                            Login
                        </button>
                    </div>
                    <div class="group">
                        @if (!string.IsNullOrEmpty(loginError))
                        {
                            <div class="alert alert-danger">@loginError</div>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool keepSignedIn;
    private string loginError;

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthenticationService.Login(loginModel.Email, loginModel.Password);

            if (result.IsSuccess)
            {
                // Clear any previous errors
                loginError = null;

                // Redirect to the main page after successful login
                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Display login error
                loginError = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            loginError = $"Login failed: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
